apiVersion: ververica.platform/v1
kind: VvpDeployment
metadata:
  name: ververica-k8s-operator-test
  namespace: vvp-bishoybasily
spec:
  syncingMode: PUT
  deployment:
    userMetadata:
      name: ververica-k8s-operator-test
      namespace: vvp-bishoybasily
    spec:
      state: RUNNING
      deploymentTargetName: default
      maxSavepointCreationAttempts: 4
      maxJobCreationAttempts: 4
      upgradeStrategy:
        kind: STATEFUL
      restoreStrategy:
        kind: LATEST_STATE
        allowNonRestoredState: false
      template:
        spec:
          artifact:
            kind: sqlscript
            sqlScript: |-
              CREATE TEMPORARY TABLE raw_price (
                  `_key_key`   STRING NOT NULL,
                  `sid`        INT    NOT NULL,
                  `price`      NUMERIC(28,6),
                  avgBid       NUMERIC(28,6),
                  avgAsk       NUMERIC(28,6),
                  priceSrc     VARCHAR(2),
                  `priceTime`  VARCHAR(50),
                  `time`       VARCHAR(50),
                  ingestTime   TIMESTAMP_LTZ(3) METADATA FROM 'timestamp',
                  PRIMARY KEY (`_key_key`) NOT ENFORCED
              )
              WITH (
                  'connector' = 'upsert-kafka',
                  'key.fields-prefix' = '_key_',
                  'key.format' = 'raw',
                  'properties.bootstrap.servers' = 'lonpkfk201.mwam.local:9092,lonpkfk202.mwam.local:9092,lonpkfk203.mwam.local:9092',
                  'properties.group.id' = 'streambook.ververica-infra-price-source-k',
                  'properties.sasl.jaas.config' = 'com.sun.security.auth.module.Krb5LoginModule required serviceName="kafka" ticketCache="/dev/shm/ccache" useTicketCache=true;',
                  'properties.sasl.kerberos.kinit.cmd' = 'echo',
                  'properties.security.protocol' = 'SASL_PLAINTEXT',
                  'topic' = 'kdb.marketdata.prices',
                  'value.fields-include' = 'EXCEPT_KEY',
                  'value.format' = 'json'
              );

              CREATE TEMPORARY TABLE sink (
                `_key_key` STRING NOT NULL,
                c BIGINT NOT NULL,
                PRIMARY KEY (`_key_key`) NOT ENFORCED
              )
              COMMENT 'topic: streambook.price-test.default, key: v1, value: v2, upsert'
              WITH (
                'connector' = 'upsert-kafka',
                'key.format' = 'json',
                'key.fields-prefix' = '_key_',
                'value.format' = 'json',
                'value.fields-include' = 'EXCEPT_KEY',
                'properties.acks' = 'all',
                'properties.bootstrap.servers' = 'lonpkfk201.mwam.local:9092',
                'properties.compression.type' = 'lz4',
                'properties.group.id' = 'streambook.ververica-infra-price-source-k',
                'properties.isolation.level' = 'read_committed',
                'properties.sasl.jaas.config' = 'com.sun.security.auth.module.Krb5LoginModule required serviceName="kafka" ticketCache="/dev/shm/ccache" useTicketCache=true;',
                'properties.sasl.kerberos.kinit.cmd' = 'echo',
                'properties.security.protocol' = 'SASL_PLAINTEXT',
                'topic' = 'streambook.price-test.default'
              );

              INSERT INTO sink
              SELECT
                _key_key,
                COUNT(*) AS c
              FROM raw_price
              GROUP BY _key_key;
          parallelism: 8
          numberOfTaskManagers: 4
          resources:
            jobmanager:
              cpu: 1
              memory: 1g
            taskmanager:
              cpu: 1
              memory: 20g
          flinkConfiguration:
            env.java.opts.jobmanager: |-
              -Djava.security.auth.login.config=/etc/jaas.conf
                  -Djava.security.krb5.conf=/etc/krb5.conf
                  -XX:+AlwaysPreTouch
                  -XX:+UnlockExperimentalVMOptions
                  -XX:+UseG1GC
                  -XX:ActiveProcessorCount=1
                  -Xlog:gc:file=/tmp/gc.out:utctime,pid,level,tags:filecount=3,filesize=50M
            env.java.opts.taskmanager: |-
              -Djava.security.auth.login.config=/etc/jaas.conf
                  -Djava.security.krb5.conf=/etc/krb5.conf
                  -XX:+AlwaysPreTouch
                  -XX:+UnlockExperimentalVMOptions
                  -XX:+UseG1GC
                  -XX:ActiveProcessorCount=1
                  -Xlog:gc:file=/tmp/gc.out:utctime,pid,level,tags:filecount=3,filesize=50M
            execution.checkpointing.externalized-checkpoint-retention: DELETE_ON_CANCELLATION
            execution.checkpointing.interval: 300s
            execution.checkpointing.min-pause: 300s
            high-availability: kubernetes
            metrics.reporter.prometheus.factory.class: org.apache.flink.metrics.prometheus.PrometheusReporterFactory
            metrics.reporter.prometheus.port: '9249'
            metrics.reporters: prometheus
            state.backend: filesystem
            state.backend.fs.memory-threshold: 80kb
            taskmanager.numberOfTaskSlots: '2'
            web.cancel.enable: 'false'
          kubernetes:
            pods: null
            jobManagerPodTemplate:
              metadata:
                annotations:
                  kerberos.mwam.local/ad-svc-account: svc-ververica-t
                  kerberos.mwam.local/fix-cache-permissions: 'true'
                  kerberos.mwam.local/inject-sidecar: enabled
                  dns.mwam.local/inject-sidecar: enabled
                  prometheus.io/port: '9249'
                  prometheus.io/scrape: 'true'
                labels:
                  system: ververica-platform
                  mwam.local/logparser: json
              spec:
                containers:
                  - name: flink-jobmanager
                    volumeMounts:
                      - name: global-jaas-config
                        mountPath: /etc/jaas.conf
                        subPath: jaas.conf
                  - name: kinit-sidecar
                    image: docker-corelib-local.artifactory.mwam.local/mwam-kinit-sidecar:0.1.1
                    imagePullPolicy: Always
                    resources:
                      requests:
                        cpu: 50m
                        memory: 100Mi
                    terminationMessagePath: /dev/termination-log
                    terminationMessagePolicy: File
                    command:
                      - /rekinit.sh
                    env:
                      - name: APPEND_OPTIONS
                        value: '-c /dev/shm/ccache svc-ververica-t@MWAM.LOCAL'
                      - name: FIX_CACHE_PERMS
                        value: 'true'
                    securityContext:
                      capabilities:
                        drop:
                          - MKNOD
                    volumeMounts:
                      - name: keytabs
                        mountPath: /krb5
                      - name: krb5config
                        mountPath: /etc/krb5.conf
                        subPath: krb5.conf
                      - name: ccache
                        mountPath: /dev/shm
                volumes:
                  - name: global-jaas-config
                    configMap:
                      name: global-jaas-config
                      items:
                        - key: jaas.conf
                          path: jaas.conf
                      defaultMode: 420
                  - name: krb5config
                    configMap:
                      name: krb5-mwam
                      items:
                        - key: krb5-mwam.conf
                          path: krb5.conf
                      defaultMode: 420
                  - name: ccache
                    emptyDir:
                      medium: Memory
                  - name: keytabs
                    secret:
                      secretName: svc-ververica-t-keytab
                      defaultMode: 420
            taskManagerPodTemplate:
              metadata:
                annotations:
                  kerberos.mwam.local/ad-svc-account: svc-ververica-t
                  kerberos.mwam.local/fix-cache-permissions: 'true'
                  kerberos.mwam.local/inject-sidecar: enabled
                  dns.mwam.local/inject-sidecar: enabled
                  prometheus.io/port: '9249'
                  prometheus.io/scrape: 'true'
                labels:
                  system: ververica-platform
                  mwam.local/logparser: json
              spec:
                containers:
                  - name: flink-taskmanager
                    volumeMounts:
                      - name: global-jaas-config
                        mountPath: /etc/jaas.conf
                        subPath: jaas.conf
                volumes:
                  - name: global-jaas-config
                    configMap:
                      name: global-jaas-config
                      items:
                        - key: jaas.conf
                          path: jaas.conf
                      defaultMode: 420
          logging:
            log4j2ConfigurationTemplate: |-
              <?xml version="1.0" encoding="UTF-8" standalone="no"?>
                        <Configuration xmlns="http://logging.apache.org/log4j/2.0/config"
                        strict="true">
                            <Appenders>
                                <Appender name="StdOut" type="Console">
                                    <JsonTemplateLayout eventTemplateUri="classpath:MWAMExtra.json" locationInfoEnabled="true">
                                        <EventTemplateAdditionalField key="application" value="{{ deploymentName}}"/>
                                        <EventTemplateAdditionalField key="deploymentId" value="{{ deploymentId }}"/>
                                        <EventTemplateAdditionalField key="jobId" value="{{ jobId }}"/>
                                    </JsonTemplateLayout>
                                </Appender>
                            </Appenders>
                            <Loggers>
                                <Logger level="INFO" name="org.apache.hadoop"/>
                                <Logger level="INFO" name="org.apache.kafka"/>
                                <Logger level="INFO" name="org.apache.zookeeper"/>
                                <Logger level="INFO" name="akka"/>
                                <Logger level="ERROR" name="org.jboss.netty.channel.DefaultChannelPipeline"/>
                                <Logger level="OFF" name="org.apache.flink.runtime.rest.handler.job.JobDetailsHandler"/>
                                {%- for name, level in userConfiguredLoggers -%}
                                <Logger level="{{ level }}" name="{{ name }}"/>
                                {%- endfor -%}
                                <Root level="{{ rootLoggerLogLevel }}">
                                    <AppenderRef ref="StdOut"/>
                                </Root>
                            </Loggers>
                        </Configuration>
